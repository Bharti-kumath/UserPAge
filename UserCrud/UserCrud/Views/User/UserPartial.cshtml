@using BAL.Models
@model UserViewModel

<div>
    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog"
         aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="userHeading fs-4">User Details</h2>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" id="closeModel" onclick="closeModel()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form class="form page__form" method="Post" id="myForm">

                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.ID)

                        <div class="form__linput">

                            <i class="bi bi-circle-fill bullet"></i>

                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form__input" } })

                            @Html.LabelFor(model => model.FirstName, "First Name", htmlAttributes: new { @class = "form__label" })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                        </div>
                        <div class="form__linput">

                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form__input" } })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            @Html.LabelFor(model => model.LastName, "Last Name", htmlAttributes: new { @class = "form__label" })
                        </div>





                        <div class="form__linput">

                            <i class="bi bi-circle-fill bullet"></i>

                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form__input" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "form__label" })
                        </div>
                        <div class="form__linput">

                            @Html.EditorFor(model => model.DAteOfBirth, new { htmlAttributes = new { @class = "form__input", @id = "dob" } })
                            @Html.ValidationMessageFor(model => model.DAteOfBirth, "", new { @class = "text-danger" })
                            <span id="dob-validation-message" class="text-danger"></span>
                            @Html.LabelFor(model => model.DAteOfBirth, "Date of Birth", htmlAttributes: new { @class = "form__label" })
                            <script>


                                flatpickr("#dob", {
                                    dateFormat: "Y-m-d",
                                    placeholder: false,
                                    onChange: function (selectedDates, dateStr, instance) {
                                        const today = new Date();
                                        const selectedDate = selectedDates[0];

                                        const age = today.getFullYear() - selectedDate.getFullYear();

                                        if (age < 21) {
                                            const validationMessageElement = document.getElementById("dob-validation-message");
                                            validationMessageElement.textContent = "Minimum age must be 21 years.";
                                        } else {
                                            const validationMessageElement = document.getElementById("dob-validation-message");
                                            validationMessageElement.textContent = "";
                                        }
                                    }
                                });
                            </script>


                        </div>


                        <div class="form__linput">

                            <i class="bi bi-circle-fill bullet"></i>

                            @Html.EditorFor(model => model.PhoneNUmber, new { htmlAttributes = new { @class = "form__input", onkeypress = "return numberOnly(event)" } })
                            @Html.ValidationMessageFor(model => model.PhoneNUmber, "", new { @class = "text-danger" })
                            @Html.LabelFor(model => model.PhoneNUmber, "Mobile Number", htmlAttributes: new { @class = "form__label" })
                        </div>
                        <div class="form__linput">

                            @Html.EditorFor(model => model.PinCode, new { htmlAttributes = new { @class = "form__input", onkeypress = "return numberOnly(event)" } })
                            @Html.ValidationMessageFor(model => model.PinCode, "", new { @class = "text-danger" })
                            @Html.LabelFor(model => model.PinCode, htmlAttributes: new { @class = "form__label" })
                        </div>

                        <div class="form__linput full_width">
                            <i class="bi bi-circle-fill bullet"></i>
                            @Html.TextAreaFor(model => model.Address, new { @class = "form__input", @id = "Address" })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "form__label" })
                        </div>

                        <div class="form__linput">
                            <i class="bi bi-circle-fill bullet"></i>
                            @Html.DropDownListFor(model => model.Country, new List<SelectListItem>
                            {
                                new SelectListItem { Text = "Country",Value=""},
                                new SelectListItem { Text = "India", Value = "India" },
                                new SelectListItem { Text = "Japan", Value = "Japan" },
                                new SelectListItem { Text = "US", Value = "US" }
                            }, new { @class = "form-select", aria_label = ".form-select.example" })
                            @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                        </div>

                        <div class="form__linput">
                            @Html.DropDownListFor(model => model.City, new List<SelectListItem>
                            {
                                new SelectListItem { Text = "City" ,Value=""},
                                new SelectListItem { Text = "Jaipur", Value = "Jaipur" },
                                new SelectListItem { Text = "Delhi", Value = "Delhi" },
                                new SelectListItem { Text = "Surat", Value = "Surat" },
                                new SelectListItem { Text = "Tokyo", Value = "Tokyo" },
                                new SelectListItem { Text = "New York", Value = "New York" }
                            }, new { @class = "form-select", aria_label = ".form-select.example" })
                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                        </div>
                        <div class="form__linput" id="password">
                            <i class="bi bi-circle-fill bullet"></i>

                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form__input", @type = "password" } })

                            @Html.LabelFor(model => model.Password, "Password", htmlAttributes: new { @class = "form__label" })
                            <span id="show-old" onclick="showPassword()"> <i class="bi bi-eye" id="eyeold"></i><i class="bi bi-eye-slash hideeye" id="eyeSlashold"></i></span>
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                        </div>
                        <div class="form__linput" id="Cpassword">

                            @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form__input", @type = "password" } })
                            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                            @Html.LabelFor(model => model.ConfirmPassword, "Confirm Password", htmlAttributes: new { @class = "form__label" })
                        </div>

                        <div class="modal-footer full_width justify-content-end">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="closeModel()">Close</button>
                            <button type="submit" class="addButton">Save</button>
                        </div>
                        
                        <input type="hidden" value="" id="userID" />

                    </form>
                @Scripts.Render("~/bundles/jqueryval")
            </div>

            </div>
        </div>
    </div>
</div>

